<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://bionanoimaging.github.io/nanoimaging.de/feed.xml" rel="self" type="application/atom+xml" /><link href="https://bionanoimaging.github.io/nanoimaging.de/" rel="alternate" type="text/html" /><updated>2022-05-16T09:45:51+00:00</updated><id>https://bionanoimaging.github.io/nanoimaging.de/feed.xml</id><title type="html">Bio-Nanoimaging in Jena</title><subtitle>Webpage of the Nanoimaging group affiliated with the Leibniz Institute of  Photonic Technology and the Friedrich Schiller University of Jena.</subtitle><entry><title type="html">DeconvOptim.jl</title><link href="https://bionanoimaging.github.io/nanoimaging.de/post/archive/2022/02/17/DeconvOptim.html" rel="alternate" type="text/html" title="DeconvOptim.jl" /><published>2022-02-17T17:16:06+00:00</published><updated>2022-02-17T17:16:06+00:00</updated><id>https://bionanoimaging.github.io/nanoimaging.de/post/archive/2022/02/17/DeconvOptim</id><content type="html" xml:base="https://bionanoimaging.github.io/nanoimaging.de/post/archive/2022/02/17/DeconvOptim.html">&lt;p&gt;Recently, we worked on a deconvolution toolbox written in Julia Lang, called &lt;a href=&quot;https://github.com/roflmaostc/DeconvOptim.jl&quot;&gt;DeconvOptim.jl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It can deconvolve multi color data very efficiently with a quality equal to &lt;a href=&quot;https://svi.nl/Huygens-Deconvolution&quot;&gt;Huygens Deconvolution&lt;/a&gt;.
&lt;img src=&quot;/assets/posts/color_deconv.jpg&quot; alt=&quot;Deconvolution of multi color dataset&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The routine is very generic and based on a loss function approach which is minimized with the automatic differentiation Zygote.jl and the optimizer package Optim.jl.
Also we put a lot of emphasize on the performance of DeconvOptim.jl, as shown here.
&lt;img src=&quot;/assets/posts/runtime_deconv.jpg&quot; alt=&quot;Runtime of different packages&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Using Julia's CUDA ability we could outperform any existing deconvolution package but maintain the same quality measure - here under the normalized cross correlation (NCC) value.&lt;/p&gt;
&lt;p&gt;See also that video&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/FodpnOhccis&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;</content><author><name>Felix Wechsler</name></author><category term="post" /><category term="archive" /><summary type="html">Recently, we worked on a deconvolution toolbox written in Julia Lang, called DeconvOptim.jl. It can deconvolve multi color data very efficiently with a quality equal to Huygens Deconvolution. The routine is very generic and based on a loss function approach which is minimized with the automatic differentiation Zygote.jl and the optimizer package Optim.jl. Also we put a lot of emphasize on the performance of DeconvOptim.jl, as shown here. Using Julia's CUDA ability we could outperform any existing deconvolution package but maintain the same quality measure - here under the normalized cross correlation (NCC) value. See also that video</summary></entry></feed>